/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Octagon AI API
 * API for Octagon AI's backend services.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  PatchedProblem,
  Problem,
  ProblemsListParams
} from '../../model'
import { customInstance } from '../../../services/custom-axios-instance';
import type { ErrorType, BodyType } from '../../../services/custom-axios-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;




export const problemsList = (
    params?: ProblemsListParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Problem[]>(
      {url: `/api/problems/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getProblemsListQueryKey = (params?: ProblemsListParams,) => {
    return [`/api/problems/`, ...(params ? [params]: [])] as const;
    }

    
export const getProblemsListQueryOptions = <TData = Awaited<ReturnType<typeof problemsList>>, TError = ErrorType<unknown>>(params?: ProblemsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof problemsList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProblemsListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof problemsList>>> = ({ signal }) => problemsList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof problemsList>>, TError, TData> & { queryKey: QueryKey }
}

export type ProblemsListQueryResult = NonNullable<Awaited<ReturnType<typeof problemsList>>>
export type ProblemsListQueryError = ErrorType<unknown>

export const useProblemsList = <TData = Awaited<ReturnType<typeof problemsList>>, TError = ErrorType<unknown>>(
 params?: ProblemsListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof problemsList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getProblemsListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const problemsCreate = (
    problem: BodyType<NonReadonly<Problem>>,
 ) => {
      
      
      return customInstance<Problem>(
      {url: `/api/problems/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: problem
    },
      );
    }
  


export const getProblemsCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof problemsCreate>>, TError,{data: BodyType<NonReadonly<Problem>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof problemsCreate>>, TError,{data: BodyType<NonReadonly<Problem>>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof problemsCreate>>, {data: BodyType<NonReadonly<Problem>>}> = (props) => {
          const {data} = props ?? {};

          return  problemsCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProblemsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof problemsCreate>>>
    export type ProblemsCreateMutationBody = BodyType<NonReadonly<Problem>>
    export type ProblemsCreateMutationError = ErrorType<unknown>

    export const useProblemsCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof problemsCreate>>, TError,{data: BodyType<NonReadonly<Problem>>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof problemsCreate>>,
        TError,
        {data: BodyType<NonReadonly<Problem>>},
        TContext
      > => {

      const mutationOptions = getProblemsCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const problemsRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Problem>(
      {url: `/api/problems/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getProblemsRetrieveQueryKey = (id: number,) => {
    return [`/api/problems/${id}/`] as const;
    }

    
export const getProblemsRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof problemsRetrieve>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof problemsRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getProblemsRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof problemsRetrieve>>> = ({ signal }) => problemsRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof problemsRetrieve>>, TError, TData> & { queryKey: QueryKey }
}

export type ProblemsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof problemsRetrieve>>>
export type ProblemsRetrieveQueryError = ErrorType<unknown>

export const useProblemsRetrieve = <TData = Awaited<ReturnType<typeof problemsRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof problemsRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getProblemsRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const problemsUpdate = (
    id: number,
    problem: BodyType<NonReadonly<Problem>>,
 ) => {
      
      
      return customInstance<Problem>(
      {url: `/api/problems/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: problem
    },
      );
    }
  


export const getProblemsUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof problemsUpdate>>, TError,{id: number;data: BodyType<NonReadonly<Problem>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof problemsUpdate>>, TError,{id: number;data: BodyType<NonReadonly<Problem>>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof problemsUpdate>>, {id: number;data: BodyType<NonReadonly<Problem>>}> = (props) => {
          const {id,data} = props ?? {};

          return  problemsUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProblemsUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof problemsUpdate>>>
    export type ProblemsUpdateMutationBody = BodyType<NonReadonly<Problem>>
    export type ProblemsUpdateMutationError = ErrorType<unknown>

    export const useProblemsUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof problemsUpdate>>, TError,{id: number;data: BodyType<NonReadonly<Problem>>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof problemsUpdate>>,
        TError,
        {id: number;data: BodyType<NonReadonly<Problem>>},
        TContext
      > => {

      const mutationOptions = getProblemsUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const problemsPartialUpdate = (
    id: number,
    patchedProblem: BodyType<NonReadonly<PatchedProblem>>,
 ) => {
      
      
      return customInstance<Problem>(
      {url: `/api/problems/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedProblem
    },
      );
    }
  


export const getProblemsPartialUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof problemsPartialUpdate>>, TError,{id: number;data: BodyType<NonReadonly<PatchedProblem>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof problemsPartialUpdate>>, TError,{id: number;data: BodyType<NonReadonly<PatchedProblem>>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof problemsPartialUpdate>>, {id: number;data: BodyType<NonReadonly<PatchedProblem>>}> = (props) => {
          const {id,data} = props ?? {};

          return  problemsPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProblemsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof problemsPartialUpdate>>>
    export type ProblemsPartialUpdateMutationBody = BodyType<NonReadonly<PatchedProblem>>
    export type ProblemsPartialUpdateMutationError = ErrorType<unknown>

    export const useProblemsPartialUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof problemsPartialUpdate>>, TError,{id: number;data: BodyType<NonReadonly<PatchedProblem>>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof problemsPartialUpdate>>,
        TError,
        {id: number;data: BodyType<NonReadonly<PatchedProblem>>},
        TContext
      > => {

      const mutationOptions = getProblemsPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const problemsDestroy = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/problems/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getProblemsDestroyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof problemsDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof problemsDestroy>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof problemsDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  problemsDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ProblemsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof problemsDestroy>>>
    
    export type ProblemsDestroyMutationError = ErrorType<unknown>

    export const useProblemsDestroy = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof problemsDestroy>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof problemsDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getProblemsDestroyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    