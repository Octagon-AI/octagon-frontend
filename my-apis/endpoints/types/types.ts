/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * Octagon AI API
 * API for Octagon AI's backend services.
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  PatchedType,
  Type,
  TypesListParams
} from '../../model'
import { customInstance } from '../../../services/custom-axios-instance';
import type { ErrorType, BodyType } from '../../../services/custom-axios-instance';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;




export const typesList = (
    params?: TypesListParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Type[]>(
      {url: `/api/types/`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getTypesListQueryKey = (params?: TypesListParams,) => {
    return [`/api/types/`, ...(params ? [params]: [])] as const;
    }

    
export const getTypesListQueryOptions = <TData = Awaited<ReturnType<typeof typesList>>, TError = ErrorType<unknown>>(params?: TypesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof typesList>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTypesListQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof typesList>>> = ({ signal }) => typesList(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof typesList>>, TError, TData> & { queryKey: QueryKey }
}

export type TypesListQueryResult = NonNullable<Awaited<ReturnType<typeof typesList>>>
export type TypesListQueryError = ErrorType<unknown>

export const useTypesList = <TData = Awaited<ReturnType<typeof typesList>>, TError = ErrorType<unknown>>(
 params?: TypesListParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof typesList>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getTypesListQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const typesCreate = (
    type: BodyType<NonReadonly<Type>>,
 ) => {
      
      
      return customInstance<Type>(
      {url: `/api/types/`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: type
    },
      );
    }
  


export const getTypesCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof typesCreate>>, TError,{data: BodyType<NonReadonly<Type>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof typesCreate>>, TError,{data: BodyType<NonReadonly<Type>>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof typesCreate>>, {data: BodyType<NonReadonly<Type>>}> = (props) => {
          const {data} = props ?? {};

          return  typesCreate(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TypesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof typesCreate>>>
    export type TypesCreateMutationBody = BodyType<NonReadonly<Type>>
    export type TypesCreateMutationError = ErrorType<unknown>

    export const useTypesCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof typesCreate>>, TError,{data: BodyType<NonReadonly<Type>>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof typesCreate>>,
        TError,
        {data: BodyType<NonReadonly<Type>>},
        TContext
      > => {

      const mutationOptions = getTypesCreateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const typesRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      
      
      return customInstance<Type>(
      {url: `/api/types/${id}/`, method: 'GET', signal
    },
      );
    }
  

export const getTypesRetrieveQueryKey = (id: number,) => {
    return [`/api/types/${id}/`] as const;
    }

    
export const getTypesRetrieveQueryOptions = <TData = Awaited<ReturnType<typeof typesRetrieve>>, TError = ErrorType<unknown>>(id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof typesRetrieve>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTypesRetrieveQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof typesRetrieve>>> = ({ signal }) => typesRetrieve(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof typesRetrieve>>, TError, TData> & { queryKey: QueryKey }
}

export type TypesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof typesRetrieve>>>
export type TypesRetrieveQueryError = ErrorType<unknown>

export const useTypesRetrieve = <TData = Awaited<ReturnType<typeof typesRetrieve>>, TError = ErrorType<unknown>>(
 id: number, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof typesRetrieve>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getTypesRetrieveQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const typesUpdate = (
    id: number,
    type: BodyType<NonReadonly<Type>>,
 ) => {
      
      
      return customInstance<Type>(
      {url: `/api/types/${id}/`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: type
    },
      );
    }
  


export const getTypesUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof typesUpdate>>, TError,{id: number;data: BodyType<NonReadonly<Type>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof typesUpdate>>, TError,{id: number;data: BodyType<NonReadonly<Type>>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof typesUpdate>>, {id: number;data: BodyType<NonReadonly<Type>>}> = (props) => {
          const {id,data} = props ?? {};

          return  typesUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TypesUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof typesUpdate>>>
    export type TypesUpdateMutationBody = BodyType<NonReadonly<Type>>
    export type TypesUpdateMutationError = ErrorType<unknown>

    export const useTypesUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof typesUpdate>>, TError,{id: number;data: BodyType<NonReadonly<Type>>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof typesUpdate>>,
        TError,
        {id: number;data: BodyType<NonReadonly<Type>>},
        TContext
      > => {

      const mutationOptions = getTypesUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const typesPartialUpdate = (
    id: number,
    patchedType: BodyType<NonReadonly<PatchedType>>,
 ) => {
      
      
      return customInstance<Type>(
      {url: `/api/types/${id}/`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchedType
    },
      );
    }
  


export const getTypesPartialUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof typesPartialUpdate>>, TError,{id: number;data: BodyType<NonReadonly<PatchedType>>}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof typesPartialUpdate>>, TError,{id: number;data: BodyType<NonReadonly<PatchedType>>}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof typesPartialUpdate>>, {id: number;data: BodyType<NonReadonly<PatchedType>>}> = (props) => {
          const {id,data} = props ?? {};

          return  typesPartialUpdate(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TypesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof typesPartialUpdate>>>
    export type TypesPartialUpdateMutationBody = BodyType<NonReadonly<PatchedType>>
    export type TypesPartialUpdateMutationError = ErrorType<unknown>

    export const useTypesPartialUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof typesPartialUpdate>>, TError,{id: number;data: BodyType<NonReadonly<PatchedType>>}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof typesPartialUpdate>>,
        TError,
        {id: number;data: BodyType<NonReadonly<PatchedType>>},
        TContext
      > => {

      const mutationOptions = getTypesPartialUpdateMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const typesDestroy = (
    id: number,
 ) => {
      
      
      return customInstance<void>(
      {url: `/api/types/${id}/`, method: 'DELETE'
    },
      );
    }
  


export const getTypesDestroyMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof typesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof typesDestroy>>, TError,{id: number}, TContext> => {
const {mutation: mutationOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof typesDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  typesDestroy(id,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TypesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof typesDestroy>>>
    
    export type TypesDestroyMutationError = ErrorType<unknown>

    export const useTypesDestroy = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof typesDestroy>>, TError,{id: number}, TContext>, }
): UseMutationResult<
        Awaited<ReturnType<typeof typesDestroy>>,
        TError,
        {id: number},
        TContext
      > => {

      const mutationOptions = getTypesDestroyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    